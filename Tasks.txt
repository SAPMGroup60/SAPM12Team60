Tasks
I noted some tasks that I think we should do in order to implement the required features.

1) Install the required software project management tools (build control, Revision control, Unit/regression testing, Bug/issue tracking, Documentation generation, Integrated suites).
2) Familiarize with the tools.
3) Gather the functionalities (We already have them).
4) Categorize them.
5) Use case diagram.
6) Use cases and descriptions.
7) Class diagram.
8) CRC cards. (Maybe we can skip that task).
9) Sequence Diagram
10) Activity Diagram
11) Implementation.
12) Testing.

*************************************************************************************************************************

1} Project Planning
Determine project team
Decide on the hardware/software required (What interfaces, packages, applications will be required to implement the project).

2} Requirements Gathering

Creation of requirement specification document (FRS) from BRS (Business Requirement Specification)
Verify the requirement specification document
Preparation of use case/class/activity diagrams
Make sure the hardware/software is in place

3} Knowledge transfer sessions from BA to Dev and Test Team

Meetings to check if the understanding is correct (MOM)

5} Design of HLD and LLD documents – technical architect prepares both

6} Development of Prototype Env 

Online portal setup/website, creation and maintenance of databases, development of business logic (Workflow management)

7} Test Case Drafting & Test Plan Preparation

8} Actual development of Environment, in parallel with Regression testing

9} Unit testing of every module , in parallel defect finding and fixing

10} Integration test phase - internal

11} System test phase – defect finding and fixing

12} Integration test phase – – defect finding and fixing -- with external third parties

13} Code Deployment 

14} User acceptance (Customer Integration test performed on behalf of customer by third party users)

15} Go Live

***************************************************************************************************************************

Requirements that cannot be expressed as tasks

1.01 Manual changes to data: ad hoc frequency
( This is a description of a specific feature that a function should have. However this cannot be expressed as a task, because there is no way to estimate how long to implement this specifically. )

1.02 Read access: lock data fields so that a record can be updated by only one user at a time
( Again, this is a description of a feature that the function of changing data by users. To implement that function can be expressed as a task, and this feature should be a performance of the function. )

1.03 Portal display: member details in full
( A requirement for displaying, not a concrete thing to do. )

1.04 Account set-up: customer hierarchy
( Similarly, this is a requirement for the feature of customer hierarchy. It can be the result of the function, but not a thing to implement by the team. )

1.05 Web channel: secure access
( A demand for the secure access. This should be considered in the process of implementing web. )

1.06 Claims workflow: facilitated and transparent
( This is a demand for the function of making claims through the web. )

1.08 Scalability: data received from customers
( A demand for the function of uploading data by users. This should be considered to achieve when implement that function, but not be seen as a specific task. )

1.09 Flexibility: data standards
( A demand for the strategy of storing data. )

1.1 Distribution: fixed time considerations
( A demand for the function of making claims. )

1.11 Claims: multiple file formats
( Same as 1.06, a demand for the function of making claims through the web. Should be considered in the process of implementing the function. )

1.13 Claims: multiple claims against a single right by an individual member
( Another demand for the function of making claims. )

1.14 Synchronisation of media database and rights information: near real time
( A requirement for the update of media database and rights information. Should be considered in the process of designing the system of storing data. )

1.16 Funds: holds on distribution 
( A demand for the function of managing payment. Should be considered in the process of implementing the function. )

1.17 GUI: user friendly CS interface
( The requirement of designing GUI. Should be considered in the process of designing GUI style. )